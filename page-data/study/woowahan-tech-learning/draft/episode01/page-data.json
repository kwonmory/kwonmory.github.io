{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/study/woowahan-tech-learning/draft/episode01/","result":{"data":{"site":{"siteMetadata":{"title":"{ 모리 막장저장소 }","author":"kwonmory","siteUrl":"https://blog.kwonmory.com","comment":{"disqusShortName":"","utterances":"kwonmory/kwonmory.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"18ccbaf5-ea48-58d2-8dc4-d8a6daaaf1e1","excerpt":"본 글은 우아한 테크러닝 3기 교육을 들으면서 필요한 부분과 제 생각이 적혀있습니다. 시작하기 2020년도 9월 1일…","html":"<blockquote>\n<p>본 글은 우아한 테크러닝 3기 교육을 들으면서 필요한 부분과 제 생각이 적혀있습니다.</p>\n</blockquote>\n<h1 id=\"시작하기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기</h1>\n<blockquote>\n<p>2020년도 9월 1일 1회차</p>\n</blockquote>\n<p>시작은 가볍게!</p>\n<p>나만 하고 있는 것이 아니라 많은 프론트엔드 개발자들이 공통적으로 가진 고민에 대해서 이야기가 시작되었다.</p>\n<p><code class=\"language-text\">&quot;내가 지금 잘하고 있나?&quot;</code>가 모든 고민의 시작일듯하다. </p>\n<p>이어서 <code class=\"language-text\">나보다 잘하는 사람드로가 네트워킹도 하고 싶다.</code>라는 고민들도 있다.</p>\n<p>물론 <code class=\"language-text\">코드의 품질</code>이나, <code class=\"language-text\">어떤 아키텍처</code>를 사용하고, <code class=\"language-text\">적정기술</code>은 무엇인지에 대해서도 고민하고 있다.</p>\n<p>김민태님께서는 이러한 고민을 차근차근 해결하기 위해 전달하고 싶은 것을 전달해주신다고 하셨다.</p>\n<p>먼저 도구!</p>\n<p>도구는 예전에는 바닥부터 만들었던 시절이 있다.</p>\n<p>하지만,</p>\n<p>지금은 도구가 많이 발전되어있는 상태이다. 이런 도구들은 생산성에 많은 도움을 주고 있다.</p>\n<p>그런데 도구는 어떤 사람이 어떤 문제를 <code class=\"language-text\">어떻게 해결하는게 좋은 방법이야</code>라는 생각을 가지고 목표를 달성하기 위해서 그 사람의 생각과 흐름을 가지고 탄생하게 된다.</p>\n<p>그래서 우리는 여기서 흐름을 잘 이해하는 것이 중요하다.</p>\n<p>쉽게 생각하면, 리액트가 나왔는데, 왜 나왔을까? 이걸 만든 사람은 무엇을 해결하려고 했고, 어떤 생각을 하면서 만들었을까?</p>\n<p>여기에 그 제작자의 생각이 담겨있다는 것이다. </p>\n<p>그래서 우리의 시선을 저런 쪽으로 옮겨보면 좋을 듯하다.</p>\n<p>MobX와 Redux를 쓰는 방법도 중요하다. 하지만 이 도구들은 시간만 투자하면 혼자 배울 수 있다.</p>\n<p>그래서 김민태님께서는 이번 교육을 통해 쓰는 방법 대신 각각의 기본적인 부분들을 다 다루면서, 중요하게 다뤄야할 부분에 대해서는 디테일하게 다루고 어떤 포인트로 바라봐야하는지 알려주신다고 하셨다.</p>\n<h2 id=\"타입스크립트-천천히-접근해가기\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%B2%9C%EC%B2%9C%ED%9E%88-%EC%A0%91%EA%B7%BC%ED%95%B4%EA%B0%80%EA%B8%B0\" aria-label=\"타입스크립트 천천히 접근해가기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 천천히 접근해가기</h2>\n<h3 id=\"명시적과-암묵적\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81%EA%B3%BC-%EC%95%94%EB%AC%B5%EC%A0%81\" aria-label=\"명시적과 암묵적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명시적과 암묵적</h3>\n<p>타입스크립트는 말 그대로 타입을 가지고 있다.</p>\n<p>휴먼 에러를 가능한 예방해줄 수 있는 언어이다. </p>\n<p>타입을 <code class=\"language-text\">명시적인 방법</code>과 <code class=\"language-text\">암묵적인 방법</code>으로 사용할 수 있다.</p>\n<p>예를 들어서 명시적인 것은 이 타입이 이거야 라고 알려주는 것이고, </p>\n<p>암묵적인 것은 이 타입은 암묵적으로 이런 타입이야 라고 말하는 것이다.</p>\n<p>타입스크립트에서는 타입 추론이라는 것을 하게되는데, 타입이 추론이 되는 부분에 대해서는 알아서 타입을 세팅해준다.</p>\n<p>그런데~</p>\n<p>우리는 명시적으로 작성하는게 더 좋다.</p>\n<p>왜냐하면 명시적으로 작성한 것은 보는 사람에게 정보를 제공하기 때문이다. 즉, 읽기가 쉬워진다.</p>\n<p>타입을 보고 이게 어떤 타입이구나 라고 바로 알 수 있다. </p>\n<p>예를 보면</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">AGE</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span> <span class=\"token constant\">AGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드와 아래 코드를 보자. 둘다 선언적이긴한데, 2번 코드는type키워드를 이용해 number가 어떤 의미를 지니고 있는지 정보를 제공하고 있다.</p>\n<p>아~ age가 AGE라는 데이터구나 라고 알 수 있는 것이다.</p>\n<p>그럼 우리는 여기서 추가적으로 문제가 생겼을 때 빠르게 원인을 분석할 수 있다는 장점도 가질 수 있다.</p>\n<p>또 예를 들면 이런 것도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>1번과 2번 차이를 보게 되면 1번은 어떤 인자를 받는지 코드를 까보지 않는 이상 알 수가 없다.</p>\n<p>그래서 오류를 내기 쉽다.</p>\n<p>반면 2번 같은 경우에는 1번에 비해 인자가 들어가는 정보를 얻을 수 있다.</p>\n<h3 id=\"컴파일-타임과-런타임\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC-%ED%83%80%EC%9E%84%EA%B3%BC-%EB%9F%B0%ED%83%80%EC%9E%84\" aria-label=\"컴파일 타임과 런타임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일 타임과 런타임</h3>\n<p>타입스크립트에서는 컴파일 타임에서 작동하는 키워드들과 런타임까지 가져가는 키워드들이 있다.</p>\n<p>타입스크립트를 컴파일하게 되면 자바스크립트가 결과물로 나오게 된다.</p>\n<p>이때 컴파일 전에 사용하던 키워드들이 자바스크립트 코드에서는 보이지 않는다. 이게 컴파일 타임에서 작동하는 키워드들이다.</p>\n<p>alias, interface, generic 등이 컴파일 타임에 작동한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> Age<span class=\"token punctuation\">;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'kwon'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> Age<span class=\"token punctuation\">;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bar<span class=\"token operator\">:</span> Bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'kwon'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>type과 interface는 차이가 없어보이긴하다. 이에 대해서 뒤에서 차즘 이야기하자.</p>\n<h2 id=\"간단한-리액트앱\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%95%B1\" aria-label=\"간단한 리액트앱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 리액트앱</h2>\n<p>우리는 Create React App을 통해 간단하게 리액트 앱을 띄울 수 있다.</p>\n<p>이용 방법은 <a href=\"https://create-react-app.dev/docs/getting-started/\">https://create-react-app.dev/docs/getting-started/</a> 를 통해 이용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> create react-app hello --template typescript</code></pre></div>\n<p>로 리액트앱을 타입스크립트로 만들수 있도록 명령어를 입력한다.</p>\n<h3 id=\"리액트가-아니라-바벨\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EA%B0%80-%EC%95%84%EB%8B%88%EB%9D%BC-%EB%B0%94%EB%B2%A8\" aria-label=\"리액트가 아니라 바벨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트가 아니라 바벨</h3>\n<p>많은 사람들이 착각하고 있는 것이 있다. 리액트가 해주는 역할과 바벨이 해주는 역할이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 아래 코드로 변경된다. 바벨에 의해서!</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token comment\">/*@__PURE__*/</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> <span class=\"token string\">\"header\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Hello\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>컴포넌트를 React의 createElement() 함수로 변환해주는 역할이 바벨이다.</p>\n<h3 id=\"apptsx를-다음처럼-수정해보자\" style=\"position:relative;\"><a href=\"#apptsx%EB%A5%BC-%EB%8B%A4%EC%9D%8C%EC%B2%98%EB%9F%BC-%EC%88%98%EC%A0%95%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"apptsx를 다음처럼 수정해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>App.tsx를 다음처럼 수정해보자.</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// src/App.tsx</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDom <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AppProps</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> AppProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">// hello</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>what<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 인자로 들어오는 props 타입도 지정이 가능하다.</p>\n<p>이게 끝~</p>\n<h2 id=\"상태-관리\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"상태 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상태 관리</h2>\n<p>전역적으로 상태를 관리하는 대표적인 아키텍처로 <a href=\"https://haruair.github.io/flux/docs/overview.html\"><code class=\"language-text\">Flux 아키텍처</code></a>가 있다.</p>\n<p>리덕스는 전역 상태를 관리하기 위해서 처음 페이스북에서 도입한 Flux로 부터 개선하고 정형화한 것이다.</p>\n<p>상태관리도구들도 각 제작자의 생각이 담겨 있다.</p>\n<p>리덕스는 이렇게 쓰세요~라는 뉘양스를 풍긴다. 그리고 리덕스는 매우 간단하게 사용이 가능하고 쉽다.</p>\n<p>MobX에는 다양한 문제들을 해결하기 위해서 다양한 기능들이 있다. 그래서 러닝커브가 약간 있는 편이다.</p>\n<blockquote>\n<p>기능이 많다는 것은 유연하게 기능들을 사용할 수 있다는 의미이며, 그 만큼 실수가 생길 수도 있다는 것이다.</p>\n</blockquote>\n<h1 id=\"레퍼런스\" style=\"position:relative;\"><a href=\"#%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-label=\"레퍼런스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레퍼런스</h1>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/play\">타입스크립트 플레이 그라운드</a></li>\n<li><a href=\"https://codesandbox.io/index2\">코드 샌드박스</a></li>\n<li><a href=\"https://reactjs.org/\">리액트</a></li>\n<li><a href=\"https://redux.js.org/\">리덕스</a></li>\n<li><a href=\"https://mobx.js.org/README.html\">MobX</a></li>\n<li><a href=\"https://redux-saga.js.org/\">리덕스 사가</a></li>\n<li><a href=\"https://blueprintjs.com/\">블루프린트-UI</a></li>\n<li><a href=\"https://testing-library.com/\">테스트 라이브러리</a></li>\n</ul>\n<h1 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h1>\n<p>전체적으로 개발자가 바라봐야하는 시선에 대해서 학습했다고 볼 수 있을 것 같다.</p>\n<p>우리는 도구를 어떤 시선으로 바라봐야할까~</p>","frontmatter":{"title":"러닝하기(1회차) - 우아한테크러닝 3기","date":"09월 02일, 2020"}}},"pageContext":{"slug":"/study/woowahan-tech-learning/draft/episode01/","previous":{"fields":{"slug":"/codesoom/codesoom-project-week4-5-retrospective/"},"frontmatter":{"title":"코드숨(codesoom) 프로젝트 4&5주차 회고하기","category":"codesoom","draft":false,"type":null}},"next":{"fields":{"slug":"/codesoom/codesoom-project-week6-retrospective/"},"frontmatter":{"title":"코드숨(codesoom) 프로젝트 6주차 회고하기","category":"codesoom","draft":false,"type":null}}}},"staticQueryHashes":["3128451518","911025623"]}