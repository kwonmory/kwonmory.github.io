{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/study/javascript/javascript-coding-skill/chapter06/","result":{"data":{"site":{"siteMetadata":{"title":"{ 모리 막장저장소 }","author":"kwonmory","siteUrl":"https://blog.kwonmory.com","comment":{"disqusShortName":"","utterances":"kwonmory/kwonmory.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"58206a95-5cab-59f5-8dd9-fd91bab28eb1","excerpt":"본 글은 자바스크립트 코딩의 기술을 보고 필요한 부분만 정리되어있으며 제 생각이 적혀있어 정확하지 않을 수도 있습니다.(피드백 주세요:-))\n초기 20년 6월 3일에 작성되었으며 블로그를 이전하면서 제 생각을 추가하여 재작성하고 있습니다. 매개변수와 return 문을 정리하라 매개변수 기본값을 생성하라  은 올바른 방법이 아니다. 왜냐하면 만약 roundTo가…","html":"<blockquote>\n<p>본 글은 <a href=\"http://www.yes24.com/Product/Goods/85019231?Acode=101\">자바스크립트 코딩의 기술</a>을 보고 필요한 부분만 정리되어있으며 제 생각이 적혀있어 정확하지 않을 수도 있습니다.(피드백 주세요:-))\n초기 20년 6월 3일에 작성되었으며 블로그를 이전하면서 제 생각을 추가하여 재작성하고 있습니다.</p>\n</blockquote>\n<h1 id=\"매개변수와-return-문을-정리하라\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%99%80-return-%EB%AC%B8%EC%9D%84-%EC%A0%95%EB%A6%AC%ED%95%98%EB%9D%BC\" aria-label=\"매개변수와 return 문을 정리하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수와 return 문을 정리하라</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;Quiz&gt;\n  1. 나머지 인수를 사용하는 이유!\n&lt;/Quiz&gt;</code></pre></div>\n<h2 id=\"매개변수-기본값을-생성하라\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EA%B8%B0%EB%B3%B8%EA%B0%92%EC%9D%84-%EC%83%9D%EC%84%B1%ED%95%98%EB%9D%BC\" aria-label=\"매개변수 기본값을 생성하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수 기본값을 생성하라</h2>\n<p><code class=\"language-text\">const round = roundTo || 2</code> 은 올바른 방법이 아니다.</p>\n<p>왜냐하면 만약 roundTo가 0일 경우 <code class=\"language-text\">false</code>로 평가되기 때문이다.</p>\n<p>그래서 매개변수 기본값을 사용하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value <span class=\"token operator\">=</span> <span class=\"token number\">10</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"해체-할당으로-객체-속성에-접근하라\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%B2%B4-%ED%95%A0%EB%8B%B9%EC%9C%BC%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EC%86%8D%EC%84%B1%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EB%9D%BC\" aria-label=\"해체 할당으로 객체 속성에 접근하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해체 할당으로 객체 속성에 접근하라</h2>\n<p>위 방식으로는 매개변수 순서가 정해져있어서 불편함이 있다.</p>\n<p>또한</p>\n<p>함수 매개변수로 값을 줄 때, 중간에 값을 줄 필요가 없는 경우가 있는데 그럴 때, 쓸데없이 <code class=\"language-text\">undefined</code>를 넣어서 방어를 해야된다는 단점이 있었음</p>\n<p>그래서 해체 할당으로 함수 인자로 넘겨주기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> landscape <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  location<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">103</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  location<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>lat<span class=\"token punctuation\">,</span> long<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> landscape<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">,</span> long<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"키-값-할당을-단순화하라\" style=\"position:relative;\"><a href=\"#%ED%82%A4-%EA%B0%92-%ED%95%A0%EB%8B%B9%EC%9D%84-%EB%8B%A8%EC%88%9C%ED%99%94%ED%95%98%EB%9D%BC\" aria-label=\"키 값 할당을 단순화하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>키-값 할당을 단순화하라</h2>\n<p>펼침연산자도 사용하고 있다.</p>\n<p><code class=\"language-text\">determiceCityAndState</code>함수가 반환값을 제한하여 필요한 부분만 가져다가 사용할 수 있다.</p>\n<p>그리고 <code class=\"language-text\">...details</code> 처럼 나머지 인자에 대해서는 그대로 반환할 수 있다는 편리함이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">setRegion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>details <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> city<span class=\"token punctuation\">,</span> state <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">determiceCityAndState</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    city<span class=\"token punctuation\">,</span>\n    state<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>abbreviation<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>details<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"나머지-매개변수로-여러-개의-인수를-변수로-전달하라\" style=\"position:relative;\"><a href=\"#%EB%82%98%EB%A8%B8%EC%A7%80-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A1%9C-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EC%9D%B8%EC%88%98%EB%A5%BC-%EB%B3%80%EC%88%98%EB%A1%9C-%EC%A0%84%EB%8B%AC%ED%95%98%EB%9D%BC\" aria-label=\"나머지 매개변수로 여러 개의 인수를 변수로 전달하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나머지 매개변수로 여러 개의 인수를 변수로 전달하라</h2>\n<p>예전에는  여러 개의 인수를 함수한테 전달할 때,</p>\n<p><code class=\"language-text\">arguments</code>객체를 이용해서 문제를 해결했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그런데 <code class=\"language-text\">arguments</code>는 일단 배열이 아닌 유사 배열이라서 배열 메서드를 사용하지 못한다. 그래서 변환이 필요함!</p>\n<p>그래서 나머지 매개변수를 이용하자.</p>\n<p>파라미터로 전개 연산자를 쓰면, 배열로 담기게 된다.</p>\n<p>아니면 배열을 펼쳐 넣어 함수를 호출 할 수도 있음</p>\n<p>중요한 것은 펼쳐진데는데 있다. 파라미터 값으로 배열이 들어오던 인수들이 들어오던 간에 전개 연산자를 통해 들어오면 배열로 만들어 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [10,20,30,40]</span></code></pre></div>\n<h3 id=\"나머지-인수를-사용하는-이유\" style=\"position:relative;\"><a href=\"#%EB%82%98%EB%A8%B8%EC%A7%80-%EC%9D%B8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"나머지 인수를 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나머지 인수를 사용하는 이유</h3>\n<ol>\n<li>인수를 배열로 다루는 것을 다른 개발자들에게 알려야 하는 경우</li>\n<li>나머지 매개변수는 코드 디버깅에 좋은 방법</li>\n<li>예로 나머지 매개변수를 이용해서 추가 매개변수를 가져오는 것으로 의심되는 라이브러리 함수를 해석하는 데 도움을 얻을 수 있고, 길게 나열된 인수를 확인할 수도 있음</li>\n<li>나머지 인수는 함수 간에 속성을 전달하면서 해당 속성을 조작할 필요가 없을 때 사용하면 좋음</li>\n</ol>","frontmatter":{"title":"JCS - 매개변수와 return 문을 정리하라","date":"09월 29일, 2020"}}},"pageContext":{"slug":"/study/javascript/javascript-coding-skill/chapter06/","previous":{"fields":{"slug":"/study/javascript/javascript-coding-skill/chapter05/"},"frontmatter":{"title":"JCS - 반복문을 단순하게 만들어라","category":"book-javascript-coding-skill","draft":false,"type":null}},"next":{"fields":{"slug":"/study/computer-science/operation-system/cpu-scheduling/"},"frontmatter":{"title":"CPU 스케줄링 정리","category":"operation-system","draft":false,"type":null}}}},"staticQueryHashes":["3128451518","911025623"]}