{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/study/javascript-coding-skill/chapter07/","result":{"data":{"site":{"siteMetadata":{"title":"{ 모리 막장저장소 }","author":"kwonmory","siteUrl":"https://blog.kwonmory.com","comment":{"disqusShortName":"","utterances":"kwonmory/kwonmory.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"327ef3fa-3b9a-5a7e-a20b-e983587a0358","excerpt":"본 글은 자바스크립트 코딩의 기술을 보고 필요한 부분만 정리되어있으며 제 생각이 적혀있어 정확하지 않을 수도 있습니다.(피드백 주세요:-)) 초기 20년 6월…","html":"<blockquote>\n<p>본 글은 <a href=\"http://www.yes24.com/Product/Goods/85019231?Acode=101\">자바스크립트 코딩의 기술</a>을 보고 필요한 부분만 정리되어있으며 제 생각이 적혀있어 정확하지 않을 수도 있습니다.(피드백 주세요:-))</p>\n</blockquote>\n<blockquote>\n<p>초기 20년 6월 4일에 작성되었으며 블로그를 이전하면서 제 생각을 추가하여 재작성하고 있습니다.</p>\n</blockquote>\n<h1 id=\"유연한-함수를-만들어라\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%97%B0%ED%95%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\" aria-label=\"유연한 함수를 만들어라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유연한 함수를 만들어라</h1>\n<h2 id=\"테스트하기-쉬운-함수를-작성하라\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\" aria-label=\"테스트하기 쉬운 함수를 작성하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트하기 쉬운 함수를 작성하라</h2>\n<ul>\n<li>코드에 테스트를 작성하느라 골치를 썩이기보다는 테스트할 수 있는 코드를 작성하는 것에 집중해야한다.</li>\n<li>\n<p>외부 함수를 불러올 때, 복잡도가 올라갈 수 있음</p>\n<ul>\n<li>외부 함수가 네트워크 접근이라던지, 외부 서비스에 접근 가능하기 때문</li>\n<li>그래서 모의 객체(mock)을 생성해서 함수를 가로채고 명시적인 반환값을 설정하게 만들어야함</li>\n</ul>\n</li>\n<li>\n<p>스텁을 사용할 때의 장점</p>\n<ul>\n<li>어떤 종류든 외부 의존성을 걱정할 필요가 없어짐</li>\n</ul>\n</li>\n<li>\n<p>테스트 코드에 스파이, 모의 객체, 스텁이 많아지면 코드가 복잡하고 강하게 결합되어있다는 증거임</p>\n<ul>\n<li>그래서 이걸 보고 코드를 뭐같이 만들었구나라고 생각할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>함수 안에 다른 함수를 호출 한다고 할 때, 내부 함수에 인자를 넘겨줘서 코드의 결합을 제거할 수 있음</p>\n<ul>\n<li>완벽하게 해결하진 못하지만, 그 내부 함수에 대한 테스트 코드를 작성하면 될 듯(문제를 다른 함수에게 옮기는 효과)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"스텁\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%85%81\" aria-label=\"스텁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스텁</h3>\n<p>외부 코드를 덮어 써서 명시적인 결과를 반환함</p>\n<p>내부 논리를 모두 제거하고 <strong>결과</strong>만 선언함</p>\n<h3 id=\"모의-객체\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EC%9D%98-%EA%B0%9D%EC%B2%B4\" aria-label=\"모의 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모의 객체</h3>\n<p>원본 객체를 대체해 호출, 원본 객체가 수신할 메시지와 호출할 메서드를 바탕으로 단언문을 작성함</p>\n<h4 id=\"스텁과-모의-객체-차이\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%85%81%EA%B3%BC-%EB%AA%A8%EC%9D%98-%EA%B0%9D%EC%B2%B4-%EC%B0%A8%EC%9D%B4\" aria-label=\"스텁과 모의 객체 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스텁과 모의 객체 차이</h4>\n<p>스텁은 결과값만 반환하는 것을 보면 될 것 같고, 모의 객체를 사용할 때는 코드를 호출하기 전에 기댓값을 설정 할 수 있다는 점과 입력 값을 또 따로 받아서 그걸 가지고 모의 객체를 만들어서 사용할 수도 있음</p>\n<h2 id=\"화살표-함수로-복잡도를-낮춰라\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EB%82%AE%EC%B6%B0%EB%9D%BC\" aria-label=\"화살표 함수로 복잡도를 낮춰라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수로 복잡도를 낮춰라</h2>\n<ul>\n<li>해체 할당으로 화살표 함수에 파라미터로 넘길 때 소괄호 주의할 것</li>\n<li>리턴할 때도 객체를 반환하는지 함수를 여는 것인지 주의해야함</li>\n</ul>\n<h3 id=\"고차함수\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98\" aria-label=\"고차함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고차함수</h3>\n<ul>\n<li>고차함수는 그저 다른 함수를 반환하는 함수일 뿐!</li>\n<li>매개변수를 가두는데 사용 할 수 있음</li>\n</ul>\n<blockquote>\n<p>고차함수는 언제 사용할까요?</p>\n</blockquote>\n<h2 id=\"부분-적용-함수로-단일-책임-매개변수를-관리하라\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EB%B6%84-%EC%A0%81%EC%9A%A9-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%9D%BC\" aria-label=\"부분 적용 함수로 단일 책임 매개변수를 관리하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부분 적용 함수로 단일 책임 매개변수를 관리하라</h2>\n<p>고차함수와 관련있음</p>\n<p>만약 매개변수가 3개인 함수가 있고, 2개는 동일하게 쓰는 상황이라면, 고차함수로 빼볼 생각도 좋음</p>\n<p>부분 적용 함수를 이용하면, 한 번에 전달해야 할 함수 인수의 수가 줄어듬</p>\n<p>다음과 같은 경우 - item이 동일하다고 보일 때</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> item2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> item3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token function\">base</span><span class=\"token punctuation\">(</span>item2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token function\">base</span><span class=\"token punctuation\">(</span>item3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>나머지 매개변수를 활용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arg1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fb</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"커링과-배열-메서드를-조합한-부분-적용-함수를-사용하라\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%A7%81%EA%B3%BC-%EB%B0%B0%EC%97%B4-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%A1%B0%ED%95%A9%ED%95%9C-%EB%B6%80%EB%B6%84-%EC%A0%81%EC%9A%A9-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"커링과 배열 메서드를 조합한 부분 적용 함수를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커링과 배열 메서드를 조합한 부분 적용 함수를 사용하라</h2>\n<p>한 번에 인수를 하나만 받는 함수를 커링이라고 한다.</p>\n<blockquote>\n<p>커링과 부분적용함수와 차이점은 인수를 몇개 받느냐 차이, 그래서 차이점이 뭔데?</p>\n</blockquote>\n<p>부분 적용 함수는 매개변수를 여러 번 받을 수 있음</p>\n<p>함수를 단순하게 만들어줌(예제를 보니 책임을 분리하는 부분이 좋음)</p>\n<h2 id=\"화살표-함수로-문맥-혼동을-피하라\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%AC%B8%EB%A7%A5-%ED%98%BC%EB%8F%99%EC%9D%84-%ED%94%BC%ED%95%98%EB%9D%BC\" aria-label=\"화살표 함수로 문맥 혼동을 피하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수로 문맥 혼동을 피하라</h2>\n<p>화살표 함수를 이용하여 this 바인딩을 새로 만들지 않도록 하기</p>\n<p>화살표 함수는 이미 문맥이 있고 다른 함수 내부에서 이 함수를 사용하려고 할 때 유용함</p>\n<p>this를 객체 안의 메서드에서 사용한다면 주의할 필요가 있음</p>\n<p>객체 안의 프로퍼티로 화살표 함수로 작성한 경우에는 this가 전역을 바라보니 주의해야함</p>","frontmatter":{"title":"JCS - 유연한 함수를 만들어라","date":"10월 09일, 2020"}}},"pageContext":{"slug":"/study/javascript-coding-skill/chapter07/","previous":{"fields":{"slug":"/study/os-study/cpu-scheduling/"},"frontmatter":{"title":"스케줄링 알고리즘","category":"study-operation","draft":false,"type":null}},"next":null}},"staticQueryHashes":["3128451518","911025623"]}